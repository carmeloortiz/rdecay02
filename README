
    =========================================================
    Geant4 - an Object-Oriented Toolkit for Simulation in HEP
    =========================================================

                              rdecay02
                              --------


This simulation began as the G4 example rdecay02, which has the physics lists and starter code to decay radioactive isotopes. It has since evolved to 
have correct neutron physics lists, a C++-coded CRAB-like geometry (no gdml). The geometry is basically a big Tube of gas Xe surrounded by SS 
tube/flange and with the sundry cylindrical shapes inside representing field cage, Cathode, ELP, ELPP, Buffer, Baffle (my word), etc.

Isotopes can be decayed, single particles like neutrons or electrons may be launched, etc. All to be arranged with, e.g., the control macros/ba133.mac 
file. Right now that control file launches ba133 decays just outside the outer TPC vessel and sets a 10 bar Xe interior volume.


You must set up in a manner similar to the following. These are Eric's paths. Yours will surely  be different. But you must have G410.4+ and ROOT6+ 
installed. The last setup is for python and is not strictly necessary; it allows to write analysis macros in python (instead of ROOT). gsl may not
be necessary either.

module load python/3.6.6
module load gcc/9.1.0
source /share/apps/geant4/10.7.1/bin/geant4.sh
module load gsl/2.6
module load root/6.14.02-py3 
source /share/apps/root/6.14.02-py3/bin/thisroot.sh 
export LD_LIBRARY_PATH={$LD_LIBRARY_PATH}

To build your rdecay02 executable after downloading, git checkout crab (as you have already done to be seeing this README), then make a build directory parallel to the existing /src and /macro, called /build. Go to it and do 

cmake ../
make

Run from the build directory, as
./rdecay02

You should now be at an interactive geant4 prompt. Say
g4> /control/execute ../macros/ba133.mac

Ctl-D out of the executable when done, and note that the above ran some events created your new ROOT file, ba133.root.

Then, in python, do something like the following
> from ROOT import TFile
> f = TFile("ba133.root")
> f.Steps.Draw("X:Y:Z","PID==11&&Volume==\"Target\"") # for example, to see the electron trajectories in the Xenon (so-called Target volume).
> # The below will show you the TTree variables available to you.
> f.Steps.Show(0)
> f.Tracks.Show(0)
> f.Tracks.Draw("KE","PID==22&&sqrt(StartX**2+Starty**2)>50") # for example to see the initial gamma energies from the Ba133 decay.


To run a multi-event job with no graphics, comment out with a '#' the line that says vis.mac in ba133.mac, and edit
the line  /run/beamOn 10 to increase number of primary ba133 decayed. Then at your command line, say
nohup ./rdecay02 ../macros/ba133.mac >& noh.out &

# I have a simple shell script to submit, via slurm, to a cluster of CPUs, when we get that far. Usually, hefty compute is not needed until we 
# turn on optical photons, which is not yet merged into the crab branch.
# Ask eric.church@pnnl.gov for help, as needed.

